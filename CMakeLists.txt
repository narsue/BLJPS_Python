CMAKE_MINIMUM_REQUIRED(VERSION 3.6.0)
project(BL_JPS)

set(PYBIND11_PYTHON_VERSION 3.6)

if(DEFINED PYTHON_INCLUDE_DIR)
	SET(PYTHON_INCLUDE_DIR "" CACHE PATH "Path to python")
	if(NOT EXISTS "${PYTHON_INCLUDE_DIR}/python.h")
		message(SEND_ERROR "Can't find python.h in ${PYTHON_INCLUDE_DIR}")
	else()
		message("-- Found Python")
	endif()
	INCLUDE_DIRECTORIES(${PYTHON_INCLUDE_DIR})
else()
	set(PythonLibsNew_FIND_VERSION 3.6)
	include(pybind11/tools/FindPythonLibsNew.cmake)
endif()

if(${CMAKE_CXX_COMPILER_ID} STREQUAL Clang OR CMAKE_COMPILER_IS_GNUCXX)
	include(CheckCXXCompilerFlag)
	check_cxx_compiler_flag(--std=c++17 SUPPORTS_STD_CXX17)
	if(SUPPORTS_STD_CXX17)
		message("-- Enabling C++1z support for Pybind11")
		set(PYBIND11_CPP_STANDARD -std=c++1z)
	else()
		message(ERROR "Compiler does not support C++17.")
	endif()
elseif(${CMAKE_CXX_COMPILER_ID} STREQUAL MSVC)
	include(CheckCXXCompilerFlag)
	check_cxx_compiler_flag("/std:c++17" SUPPORTS_CXX17)
	if(SUPPORTS_CXX17)
		message("-- Enabling C++latest support for Pybind11")
		set(PYBIND11_CPP_STANDARD /std:c++17)
	else()
		message(ERROR "Compiler does not support C++17.")
	endif()
elseif(${CMAKE_CXX_COMPILER_ID} STREQUAL AppleClang)
	include(CheckCXXCompilerFlag)
	check_cxx_compiler_flag(--std=c++17 SUPPORTS_STD_CXX17)
	if(SUPPORTS_STD_CXX17)
		message("-- Enabling C++17 support with -std=c++17.")
		set(PYBIND11_CPP_STANDARD -std=c++17)
	else()
		check_cxx_compiler_flag(--std=c++1z SUPPORTS_STD_CXX1Z)
		if(SUPPORTS_STD_CXX1Z)
			message("-- Compiler only supports C++1z (enabling with -std=c++1z).")
			set(PYBIND11_CPP_STANDARD -std=c++1z)
		else()
			message (ERROR "Compiler does not support C++17 or C++1z")
		endif()
	endif()
else()
	message(ERROR "Unknown compiler.")
endif()


add_subdirectory(pybind11)

pybind11_add_module(BL_JPS main.cpp binaryHeap.h BL_JPS.h Node.h PathFindingAlgorithm.h)

# target_link_libraries(BL_JPS PRIVATE microrts-plus-plus)
